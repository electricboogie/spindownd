#!/bin/bash

PATH='/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

function _spindownd {

# Set timeout
local -i TIMEOUT=1800

# Set initial polling interval to actual, and add multiplier to use when in standby
local -i INITIAL_POLLING_INTERVAL=30
local -i STANDBY_MULTIPLIER=6
local -i ACTUAL_POLLING_INTERVAL=$INITIAL_POLLING_INTERVAL

# Array of disks-by-id we want watched
local -a WATCHDISKS=(
	/dev/disk/by-id/ata-WDC_WD30EFRX-68EUZN0_WD-WCC4N5VD5C7Z
	/dev/disk/by-id/ata-WDC_WD30EFRX-68EUZN0_WD-WCC4N1LH697F
	/dev/disk/by-id/ata-WDC_WD30EFRX-68EUZN0_WD-WCC4N4HYL8ZD
)

# Convert disks-by-id to raw disk names
local -a RAWDISKS=()

for disk in "${WATCHDISKS[@]}" ; do
	local LINKED_DISK=$( readlink -f "$disk" )
	local BASE_DISK_NAME=$( basename "$LINKED_DISK" )
	RAWDISKS+=($( echo "$BASE_DISK_NAME" ))
done

# Then delete unneeded array, WATCHDISKS
unset WATCHDISKS

# Main daemon loop
while true ; do
 # Loop through all the array disks and spin down the idle disks. Will find all drives sda -> sdz AND sdaa -> sdaz...
 for disk in "${RAWDISKS[@]}"; do

  # Check if drive does not exist, if not, then exit
  if [ ! -e /dev/$disk ]; then
  	continue
  fi

  # Check if drive already in standby, if so, then increase polling interval and exit
  if [ $( hdparm -C /dev/$disk | grep -c "standby" ) -ne 0 ]; then
  	ACTUAL_POLLING_INTERVAL=$(( $STANDBY_MULTIPLIER * $INITIAL_POLLING_INTERVAL ))
  	#echo "/dev/$disk is already sleeping. New polling interval is $ACTUAL_POLLING_INTERVAL seconds."
	continue
  fi

  # Create a files on the ramdisk and cycle it to test for disk activity
  # Create the initial stats, if removed b/c non-idle
  if [ ! -e "/dev/shm/diskstats_initial_$disk" ]; then
  	cat /proc/diskstats | grep "$disk" > "/dev/shm/diskstats_initial_$disk"
  fi
  # Always recreate the new stats
  cat /proc/diskstats | grep "$disk" > "/dev/shm/diskstats_latest_$disk"
  # Poll for file last modfied time/date
  local -i INITIAL_POLL=$( stat -c %Y "/dev/shm/diskstats_initial_$disk" )
  local -i LATEST_POLL=$( stat -c %Y "/dev/shm/diskstats_latest_$disk" )
  local -i DIFF_POLL=$(( $LATEST_POLL - $INITIAL_POLL ))

  # Test possible drive states and execute appropriate action:

  # 1) Non-idle (clear diskstats and start over immediately):
  if [ "$( diff /dev/shm/diskstats_initial_$disk /dev/shm/diskstats_latest_$disk )" != "" ]; then
  	rm "/dev/shm/diskstats_initial_$disk"
  	#echo "Disk has NOT been IDLE during the polling period.  Resetting polling for disk: /dev/$disk"
  # 2) Idle but not timed out (do nothing)
  elif [ $DIFF_POLL -lt $TIMEOUT ]; then
  	local -i SECONDS_TO_TIMEOUT=$(( $TIMEOUT - $DIFF_POLL ))
  	#echo "Disk is IDLE but has not reached its TIMEOUT yet.  Continuing to poll disk: /dev/$disk.  Timeout in $SECONDS_TO_TIMEOUT seconds"
  # 3) Idle and timed out (force standby disk)
  else
  	rm "/dev/shm/diskstats_initial_$disk"
  	hdparm -y /dev/$disk > /dev/null
  	echo "Disk has been IDLE for the timeout period.  Spinning down disk: /dev/$disk"
  fi
 done

# Sleep for polling interval period
sleep $ACTUAL_POLLING_INTERVAL
# And then reset to default
ACTUAL_POLLING_INTERVAL=$INITIAL_POLLING_INTERVAL

done

}

_spindownd 2>&1 | /usr/bin/logger -t spindownd &
